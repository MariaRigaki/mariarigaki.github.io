[{"authors":["admin"],"categories":null,"content":"Maria Rigaki is a PhD student in the department of Computer Science at Czech Technical University (CTU) in Prague. As a member of Stratosphere Lab, she is working on applications of Machine Learning and AI in cyber security. Before that she spent many years working as a software developer and systems architect. Her work spanned several domains including designing and developing solutions for telecommunications, physical security, emergency response systems and critical infrastructures. In her spare time Maria enjoys hacking and playing CTFs.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://mariarigaki.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Maria Rigaki is a PhD student in the department of Computer Science at Czech Technical University (CTU) in Prague. As a member of Stratosphere Lab, she is working on applications of Machine Learning and AI in cyber security. Before that she spent many years working as a software developer and systems architect. Her work spanned several domains including designing and developing solutions for telecommunications, physical security, emergency response systems and critical infrastructures.","tags":null,"title":"Maria Rigaki","type":"authors"},{"authors":["Veronica Valeros","Maria Rigaki","Kamila Babayeva","Sebastian Garcia"],"categories":[],"content":"","date":1570147200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570643815,"objectID":"60b434fc20e72e5cdfadeafed03cf64e","permalink":"https://mariarigaki.github.io/talk/virusb2019/","publishdate":"2019-10-04T00:00:00Z","relpermalink":"/talk/virusb2019/","section":"talk","summary":"Reports on cyber espionage operations have been on the rise in the last decade. However, operations in Latin America are heavily under researched and potentially underestimated. In this paper we analyse and dissect a cyber espionage tool known as Machete. The results presented in this work are based on the collection, reversing and analysis of Machete samples from 2013 to 2019. The large collection of samples allowed us to analyse changes in features and the malware's evolution, including the latest changes introduced in January 2019.\nOur research shows that Machete is operated by a highly coordinated and organized group that focuses on Latin American targets. We describe the five phases of the APT operations from delivery to exfiltration of information and we show why Machete is considered a cyber espionage tool. Furthermore, our analysis indicates that the targeted victims belong to military, political or diplomatic sectors. The review of the almost six years of Machete operations shows that it is likely operated by a single group, and their activities are possibly state-sponsored. Machete is still active and operational to this day.","tags":[],"title":"Virus Bulletin 2019","type":"talk"},{"authors":["Maria Rigaki"],"categories":["hackathon","side-channels"],"content":" TL;DR Using a Picoscope 2204A and its SDK to perform timing side channel attacks against a weak password checker implementation running in an Arduino. Code, screenshots and lessons learned!\nLast weekend we held the bi-annual Stratosphere hackathon. It is a small tradition where twice a year the whole team gathers in a relatively remote place and we spend the weekend hacking and bonding. This time the hackathon was held at the beautiful MalÃ¡ Ãšpa, in the mountains close to the border of Czech Republic and Poland.\n Our hackathon home   The goal For this year\u0026rsquo;s event I decided that I wanted to work on something that I had not done before and step quite a lot out of my comfort zone. Ever since the Real World Crypto summer school that I attended this year in Croatia and the Side Channel Attacks (SCA) workshop, I\u0026rsquo;ve been meaning to work on side channels. In addition I had not really used an oscilloscope before and that was an opportunity to learn more and get over the fear and mystery of hardware.\nStarting out, my goal for the hackathon was to learn how to use a USB based oscilloscope and use it in order to perform side channel attacks. The weapon of choice was a Picoscope 2204A [1] which was chosen based on the following criteria: a) it is a USB scope so it is easy to carry and works with my laptop, b) it is relatively reliable and while it is the entry level product of the series, it still is quite powerfull and c) it has software that runs in all platforms and more specifically Linux. This was crucial since I did not want to fiddle around with Windows or scopes that did not offer a good software solution including SDKs.\nSide Channel Attack (SCA) Side channel attacks are attacks that take advantage of information leakage that is not directly related to the function being attacked. For example, in cryptography you might have a cryptographic function such a smart card or other software that performs communication encryption. A side channel is using information such as power analysis, timing, electromagentic emanations, sound, etc to reveal secret keys instead of attacking the cryptographic algorithm itself.\nA timing side-channel I started first with a simple kind of SCA which is a timing attack against an insecure password implementation. I found a nice blog explaining timing side channel attacks in Arduino [2] and I used the arduino code provided there, as the vulnerable implementation to attack:  Arduino code from [2]  \nThe main idea is that you store a six digit password (or any length really) and you use the serial port to send a candidate password to the Arduino. While the Arduino checks the password it turns on a LED that in essence corresponds to a digital pin set to ON. The password checking implementation looks at one digit at a time but it returns as soon as an incorrect digit is found. The fact that the response is not constant in time means that it leaks information about the validity of each digit, rendering the timing attack possible. Using the fact that the LED pin is turned on while the password check is perfomed, we can monitor the time that the PIN is on using the oscilloscope. The more digits that are correct, the longer the password checker takes and the longer the LED pin is on.\nTo illustrate the problem let\u0026rsquo;s see how the Picoscope software looks like when the first 3 digits are correct:  First three correct digits   and when all 6 digits are correct:  All digits correct  \nUsing the Picoscope The Picoscope is a USB oscilloscope that can be used for multiple purposes such as voltage measurement, spectrum analysis, serial channel decoding, etc. The interesting thing about USB scopes is that they come with powerful software that can perform advanced measurements and calculations which are usually quite expensive to get, or cost extra in bigger tabletop oscilloscopes. Of course it all comes down to specifications such as sampling rates, bandwidth, number of channels and so on, but my impression so far is that you can get very good value for money with a good USB scope.\nI do not intent to cover the Picoscope functions in detail in this blog post, but I do want to mention two functions that were important for this project: Triggers and automatic measurement functions.\nAs the scope runs, it continuously gathers data until you stop it. This results in viewing everything on screen in real time but usually we want to \u0026ldquo;freeze\u0026rdquo; the scope when something of interest happens so that we can see it. A trigger allows us to tell the scope when to start (and stop) capturing data and present them on screen. Triggers can be single (only triggers once) or repeated (when we capturing periodic events) and they come with a lot of settings such as rising edge or falling edge, etc. An example of a rising edge trigger is when we want the scope to start capturing when the voltage of a measurement goes from 0 to some higher value.\nThe other function that I used a lot in this project was the measurement functionality. Since we want to measure the time for which the LED pin is on we can use the high pulse width type of measurement. The results appear as a line in the bottom of the window and it is visible in the previous two pictures.\nUsing the Pico SDK to perform the attack Since we can access the serial port we could always perform the attack programmatically, for example using pyserial. But where is the fun in that? ðŸ˜„ Besides, I wanted to use the scope for the attack, since the fact that the serial port was used for input was just for illustration purposes. It could have been replaced just as easily with a bunch of buttons or some other way to provide input that is not directly measurable.\nIt was also a great opportunity to learn how to use the SDK that comes with the Picoscope. After looking at the site for documentation I got to the Github link where all the SDK software can be found [3]. A good number of languages is supported (C/C++, C#, Python, VB .NET, LabVIEW, MATLAB). For each language and each specific driver there is example code that helps to get started. Although the code is very well documented and the programming guide explains quite a few details, the task was not problem free.\nThe first problem I faced was that I could not open the port and connect to the device. It turns out that there are two drivers for the 2000 series: the ps2000 and the ps2000a. Although my device is called 2204A it actually did NOT use the ps2000a driver but the ps2000 one. I found that out after going through some posts in the support forum that faced similar problems. Even though I knew now which example should be the correct one to try, I still could not connect to the device. It turned out that I needed to run the python script using sudo in order to open the connection!!!\nThe second problem was to reproduce the settings that were working with the picoscope using the python code. The most straight forward approach here was to try and understand the different API calls and how they correspond to the software settings and then plot the screens using matplotlib in order to see the captured data. After fiddling quite a bit with the code I managed to produce something like the folllowing which is very close to what I could see in the picoscope software after providing the correct password:  All digits correct using the SDK  \nCode walkthrough As a base I started with the Block code example that comes with the SDK. As mentioned in the example, the code \u0026ldquo;opens a 2000 driver device, sets up two channels and a trigger then collects a block of data. This data is then plotted as mV against time in ns.\u0026ldquo; Steps:\n Open connection: ps2000_open_unit() Define channels: ps2000_set_channel() Define triggers: ps2000_set_trigger() Get timebase information: ps2000_get_timebase() Capture data: ps2000_run_block() Check if data collection is finished: ps2000_ready() Get the data from the scope: ps2000_get_values() Convert data from ADC to mV: adc2mV() Plot the data using matplotlib: plt.plot() Stop the scope: ps2000_stop() Close the scope: ps2000_close_unit()  Defining the trigger and the timebase were the most challenging parts for me, because the way some things are defined were not exactly similar to what I was seeing using the picoscope software. For example, the trigger threshold was set using ADC counts and not in voltage as it was on the software. The timebase was also tricky because it expects an integer value that is relative to the maximum timebase your device supports. After some calculations and a bit of trial and error, I managed to get to a point where my captured data corresponded to something I could use for the attack. The programming guide that explains the functions and their arguments in detail can be found here [4].\nThe following changes/additions were required for the timing attack:\n Open the serial port using pyserial. Send a password while data capture was running. Instead of plotting measure how many data points are above 490mV. Keep the maximum value and digit as a candidate digit. Repeat for all possible digits (0\u0026hellip;9). Repeat for all six digits of the password.  The gist with all the code can be found here [5] and a screenshot of the ouptut can be seen here:  All digits correct  \nSummary I really enjoyed this project and it turned out that this was a great fit for the hackathon as I managed to pull it off within the 24 hour period that we had for this. Before I started out, I had very little experience using an oscilloscope and I only watched some videos in Youtube in order to try and learn the basics. Now, I feel much more comfortable and I am looking forward to explore more capabilities of the scope. Hopefully I will be able to use it to perform other types of side channels. Stay tuned and as always if you have any questions or comments feel free to contact me!\nLinks and References [1] https://www.picotech.com/oscilloscope/2000/picoscope-2000-overview\n[2] http://eax64.github.io/2015/04/10/timing-attack-on-arduino.html\n[3] https://github.com/picotech\n[4] https://www.picotech.com/download/manuals/picoscope-2000-series-programmers-guide.pdf\n[5] https://gist.github.com/MariaRigaki/2d65a8a569cced23272beb7962d6654d\n","date":1564398965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564398965,"objectID":"a0bf076b92406ca1073feaa1016cbfe7","permalink":"https://mariarigaki.github.io/post/summer-hacakathon-2019/","publishdate":"2019-07-29T13:16:05+02:00","relpermalink":"/post/summer-hacakathon-2019/","section":"post","summary":"TL;DR Using a Picoscope 2204A and its SDK to perform timing side channel attacks against a weak password checker implementation running in an Arduino. Code, screenshots and lessons learned!\nLast weekend we held the bi-annual Stratosphere hackathon. It is a small tradition where twice a year the whole team gathers in a relatively remote place and we spend the weekend hacking and bonding. This time the hackathon was held at the beautiful MalÃ¡ Ãšpa, in the mountains close to the border of Czech Republic and Poland.","tags":["side-channels","oscilloscope"],"title":"Scoping it out!","type":"post"},{"authors":["Veronica Valeros","Maria Rigaki","Sebastian Garcia"],"categories":["conference paper"],"content":"","date":1561024587,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553162187,"objectID":"88e4dade1d12f9b12d5272afa31d375e","permalink":"https://mariarigaki.github.io/publication/machete/","publishdate":"2019-06-20T11:56:27+02:00","relpermalink":"/publication/machete/","section":"publication","summary":"Reports on cyber espionage operations have been on the rise in the last decade. However, operations in Latin America are heavily under researched and potentially underestimated. In this paper we analyze and dissect a cyber espionage tool known as Machete. Our research shows that Machete is operated by a highly coordinated and organized group who focuses on Latin American targets. We describe the five phases of the APT operations from delivery to exfiltration of information and we show why Machete is considered a cyber espionage tool. Furthermore, our analysis indicates that the targeted victims belong to military, political, or diplomatic sectors. The review of almost six years of Machete operations show that it is likely operated by a single group, and their activities are possibly statesponsored. Machete is still active and operational to this day","tags":["advanced persistence threat","cyber espionage","malware operations"],"title":"Machete: Dissecting the Operations of a Cyber Espionage Group in Latin America","type":"publication"},{"authors":["Maria Rigaki","Sebastian Garcia"],"categories":["conference paper"],"content":"","date":1527069387,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527069387,"objectID":"3d3cbdada8e20df7b08a56976bf713b9","permalink":"https://mariarigaki.github.io/publication/gan-knife-fight/","publishdate":"2018-05-23T11:56:27+02:00","relpermalink":"/publication/gan-knife-fight/","section":"publication","summary":"Generative Adversarial Networks (GANs) have been successfully used in a large number of domains. This paper proposes the use of GANs for generating network traffic in order to mimic other types of traffic. In particular, our method modifies the network behavior of a real malware in order to mimic the traffic of a legitimate application, and therefore avoid detection. By modifying the source code of a malware to receive parameters from a GAN, it was possible to adapt the behavior of its Command and Control (C2) channel to mimic the behavior of Facebook chat network traffic. In this way, it was possible to avoid the detection of new-generation Intrusion Prevention Systems that use machine learning and behavioral characteristics. A real-life scenario was successfully implemented using the Stratosphere behavioral IPS in a router, while the malware and the GAN were deployed in the local network of our laboratory, and the C2 server was deployed in the cloud. Results show that a GAN can successfully modify the traffic of a malware to make it undetectable. The modified malware also tested if it was being blocked and used this information as a feedback to the GAN. This work envisions the possibility of self-adapting malware and self-adapting IPS.","tags":["GAN","intrusion detection"],"title":"Bringing a GAN to a Knife-fight: Adapting Malware Communication to Avoid Detection","type":"publication"},{"authors":["Maria Rigaki"],"categories":[],"content":"","date":1523059200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560426163,"objectID":"0796ec4dd08a290e275c4cce7c8c5b5c","permalink":"https://mariarigaki.github.io/talk/arming/","publishdate":"2018-04-07T00:00:00Z","relpermalink":"/talk/arming/","section":"talk","summary":"Generative Adversarial Networks (GANs) are a recent invention that shows impressive results in generating completely new images of faces, building interiors and much more. In this talk we present how we can use GANs to modify network traffic parameters in order to mimic other types of traffic. More specifically, we modify an open source malware to use a GAN to dynamically adapt its Command and Control network behavior and mimic the traffic characteristics of Facebook chat. In this way it is able to avoid the detection from new-generation Intrusion Prevention Systems that use behavioral characteristics. We will present our experiments from a real-life scenario that used the Stratosphere behavioral IPS deployed in a router between the malware which was deployed in our lab and the C\u0026C server deployed in AWS. Results show that it is possible for the malware to become undetected when given the input parameters from a GAN. The malware is also aware of whether or not it is being blocked and uses this as a feedback signal in order to improve the GAN model. Finally, we discuss the implications of this work in malware detection as well as other areas such as censorship circumvention.","tags":[],"title":"Arming Malware with GANs","type":"talk"},{"authors":["Maria Rigaki"],"categories":["thesis"],"content":"","date":1499334185,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1499334185,"objectID":"d189106c8eed5be708b32abf10a6ae0c","permalink":"https://mariarigaki.github.io/publication/master-thesis/","publishdate":"2017-07-06T11:43:05+02:00","relpermalink":"/publication/master-thesis/","section":"publication","summary":"Traditional approaches in network intrusion detection follow a signature-based ap- proach, however the use of anomaly detection approaches based on machine learning techniques have been studied heavily for the past twenty years. The continuous change in the way attacks are appearing, the volume of attacks, as well as the improvements in the big data analytics space, make machine learning approaches more alluring than ever. The intention of this thesis is to show that using machine learning in the intrusion detection domain should be accompanied with an evaluation of its robustness against adversaries. Several adversarial techniques have emerged lately from the deep learning research, largely in the area of image classification. These techniques are based on the idea of introducing small changes in the original input data in order to make a machine learning model to misclassify it. This thesis follows a big data Analytics methodology and explores adversarial machine learning techniques that have emerged from the deep learning domain, against machine learning classifiers used for network intrusion detection. The study looks at several well known classifiers and studies their performance under attack over several metrics, such as accuracy, F1-score and receiver operating characteristic. The approach used assumes no knowledge of the original classifier and examines both general and targeted misclassification. The results show that using relatively simple methods for generating adversarial samples it is possible to lower the detection accuracy of intrusion detection classifiers from 5% to 28%. Performance degradation is achieved using a methodology that is simpler than previous approaches and it requires only 6.25% change between the original and the adversarial sample, making it a candidate for a practical adversarial approach.","tags":["adversarial ml","intrusion detection"],"title":"Adversarial Deep Learning Against Intrusion Detection Classifiers","type":"publication"}]